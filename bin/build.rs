extern crate capnpc;

use std::fs::File;
use std::path::PathBuf;
use std::io::{Read, Write};
use std::env::set_var;
use std::path::Path;

fn fix(path: PathBuf) {
    let mut contents = {
        let mut file = File::open(&path).expect(&format!("Expected to be able to open the autogenerated source at {:?}", &path));
        let mut contents = String::new();
        file.read_to_string(&mut contents).expect(&format!("Expected to be able to read the autogenerated source at {:?}", &path));
        contents
    };

    contents = contents.replace("::indradb_capnp::", "::autogen::indradb_capnp::");
    let mut file = File::create(&path).expect(&format!("Expected to be able to open the autogenerated source at {:?}", &path));
    file.write_all(contents.as_bytes()).expect(&format!("Expected to be able to write to the autogenerated source at {:?}", &path));
}

fn main() {
    set_var("OUT_DIR", "src/common/autogen");

    capnpc::CompilerCommand::new()
        .file("indradb.capnp")
        .run().expect("Expected to be able to compile capnp schemas");

    // This hackiness is because capnproto assumes the modules are at the
    // crate root, and we need to fix that
    let path = Path::new(".").join("src").join("common").join("autogen").join("indradb_capnp.rs");
    fix(path);
}
